{"name":"treedb","tagline":"A hierarchical key-value-database for common lisp","body":"# treedb\r\n\r\ntreedb is a simple in-memory database for hierarchical keys.\r\nThis means, your keys are structured like a path in a file system or a system registry.\r\n\r\n## Features\r\n\r\n* storing values in memory in a tree structure\r\n* tree inspection\r\n* alist and json export\r\n* implemented in alists\r\n\r\n### Planned features\r\n\r\n* persistence\r\n* restarts\r\n* other internal implementations\r\n* serialization\r\n* tree queries/manipulation\r\n\r\n## Installation\r\n\r\ntreedb comes with an ASDF system, so it can be loaded via ASDF\r\nor as a local project via quicklisp.\r\n\r\n## Usage\r\n\r\nFor detailed info see the [documentation](treedb.html)\r\n\r\ntreedb lives in the package [`treedb`](treedb.html#reference-treedb).\r\nHere are some examples:\r\n\r\n```common-lisp\r\n;;create a new instance\r\n(defparameter *db* (treedb:make-alist-treedb))\r\n\r\n;;set values:\r\n(setf (treedb:node *db* :a :1) \"Hello\" ; /:a/:1 <- \"Hello\"\r\n      (treedb:node *db* :a :2) :world  ; /:a/:2 <- :world\r\n      (treedb:node *db* :b) 1          ; /:b <- 1\r\n      (treedb:node *db* :c) '((1 . 2) (3 . 4))) ; /:c <- '((1 . 2) (3 . 4))\r\n\r\n;;get values\r\n(treedb:node *db* :a :1) ; => \"Hello\"\r\n\r\n;;delete nodes\r\n(treedb:del-node *db* :b)\r\n\r\n;;list keys\r\n(treedb:children *db*) ; => (:A :C)\r\n(treedb:children *db* :a) ; => (:|1| :|2|)\r\n\r\n;;take a subtree\r\n(treedb:subtree *db* :a) ; => subtree from :a\r\n\r\n;;convert to alists or json (via cl-json)\r\n(treedb:to-alist (treedb:subtree *db* :a))\r\n  ; => ((:1 . \"Hello\") (:2 . :world))\r\n(treedb:to-json (treedb:subtree *db* :a))\r\n  ; => \"{\\\"2\\\":\\\"Hello\\\",\\\"2\\\":\\\"world\\\"}\"\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}